apply plugin: 'com.android.application'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    dataBinding {
        enabled true
    }

    defaultConfig {
        applicationId "com.dreamliner.rvhelper.sample"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.code
        versionName versions.name
        manifestPlaceholders = [CHANNEL_VALUE: "dreamliner"]
        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    signingConfigs {
        release {
            def filePrivateProperties = file("private.properties")
            if (filePrivateProperties.exists()) {
                Properties propsPrivate = new Properties()
                propsPrivate.load(new FileInputStream(filePrivateProperties))
                storeFile file(propsPrivate['RELEASE_STORE_FILE'])
                storePassword propsPrivate['RELEASE_STORE_PASSWORD']
                keyAlias propsPrivate['RELEASE_KEY_ALIAS']
                keyPassword propsPrivate['RELEASE_KEY_PASSWORD']
            }
        }
    }

    buildTypes {
        debug {
            resValue 'string', 'APP_NAME', 'RvHelper'
            resValue 'string', 'isDebug', 'true'
            minifyEnabled false
            signingConfig signingConfigs.release
        }

        release {
            resValue 'string', 'APP_NAME', 'RvHelper'
            resValue 'string', 'isDebug', 'false'
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        preview {
            resValue 'string', 'APP_NAME', 'RvHelper'
            resValue 'string', 'isDebug', 'true'
            debuggable true
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(output.outputFile.parent + "/${variant.buildType.name}", "${variant.buildType.name}".contains("release")
                    ? "dreamliner-rvhelperSample-${variant.buildType.name}-V${variant.versionName}-${variant.productFlavors[0].name}.apk".toLowerCase()
                    : "dreamliner-rvhelperSample-${variant.buildType.name}.apk".toLowerCase())
        }
    }

    packagingOptions {
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
    }

    productFlavors {
        dreamliner {
            manifestPlaceholders = [CHANNEL_VALUE: name]
        }
    }
}

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile libraries.junit
    compile libraries.supportAppCompat

    compile libraries.butterknife
    annotationProcessor libraries.butterknifeApt

    compile libraries.loadingDrawable
    compile libraries.flexibledivider
    compile libraries.percentSupport
    compile project(':Library')
    //user this in your project
    //compile 'com.dreamliner.lib:RvHelper:2.1.0'
    compile 'com.dreamliner.lib:AndroidImageSlider:1.1.0'

    compile 'com.squareup.okhttp3:okhttp:3.8.1'

    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.github.bumptech.glide:okhttp3-integration:1.5.0'
    compile 'jp.wasabeef:glide-transformations:2.0.1'
}
